{"version":3,"sources":["Setup/picker.jsx","Setup/scanqr.jsx","Setup/index.jsx","Slide/index.jsx","SlideStack/index.jsx","App.jsx","AppContainer.jsx","serviceWorker.js","index.js"],"names":["Component","ScanQr","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","delay","result","handleScan","bind","assertThisInitialized","data","setState","onSetUri","err","console","error","react_default","a","createElement","react_qr_reader_lib_default","onError","handleError","onScan","style","width","marginTop","fontSize","textAlign","color","Setup","joinGame","toggleJoin","_this2","id","onClick","className","Fragment","scanqr","uri","Slide","slide","current","dx","moved","nextStyle","slideStyle","objectSpread","transform","concat","name","max","window","innerWidth","canDouble","App","React","points","onSetup","log","onBuzz","context","socket","emit","type","lib","event","handler","_ref","contextTypes","PropTypes","object","isRequired","options","transports","AppContainer","started","getStarted","openFullscreen","document","getElementById","screen","orientation","lock","setUri","elem","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","src_App","src_Setup","Boolean","location","hostname","match","ReactDOM","render","src_AppContainer","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e170408.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport CircularSlider from 'react-circular-slider-bar';\n\nclass Setup extends Component {\n    state = {\n        type: 0,\n        value: 0,\n        actual_value: 0\n    }\n    toggleType = () => {\n        let new_type = this.state.type === 0 ? 1 : 0;\n        this.setState({ type: new_type});\n        this.setValue(0);\n    }\n    setValue  = (value) => {\n        let max_value = this.state.type === 0 ? 46 : 4;\n        let actual_value = value / 100 * max_value;\n        actual_value = this.state.type === 0 ? actual_value.toFixed(1) : parseInt(actual_value);\n\n        this.setState({ value: value, actual_value });\n    }\n    render() {\n        return (\n            <div id=\"timePicker\">\n                <div id=\"time\">\n                    <span>\n                        { parseInt(this.state.actual_value) }\n                    </span>\n\n                    <button onClick={this.toggleType}>\n                        { this.state.type === 0 ? 'MINS' : 'HOURS' }\n                    </button>\n                </div>\n                <CircularSlider\n                    r={(window.innerWidth - 70) * 0.8 / 2}\n                    trackWidth={30}\n                    trackColor={'rgba(210, 205, 223, 0.33)'}\n                    arcColor={'#4c377e'}\n                    thumbBorderColor={'rgb(160, 157, 165)'}\n                    thumbColor={'rgb(163, 151, 192)'}\n                    thumbWidth={35}\n                    value={this.state.value}\n                    onChange={value => this.setValue(value)}\n                    />\n            </div>\n        );\n    }\n}\n\nexport default Setup;\n","import React, { Component } from \"react\";\nimport QrReader from \"react-qr-reader\";\n \nclass ScanQr extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      delay: 300,\n      result: \"No result\"\n    };\n    this.handleScan = this.handleScan.bind(this);\n  }\n  handleScan(data) {\n    if (data) {\n      this.setState({\n        result: data\n      });\n\n      this.props.onSetUri(data);\n    }\n  }\n  handleError(err) {\n    console.error(err);\n  }\n  render() {\n    return (\n      <div>\n        <QrReader\n          delay={this.state.delay}\n          onError={this.handleError}\n          onScan={this.handleScan}\n          style={{ width: \"100vw\" }}\n        />\n\n        <p style={{ marginTop: '40px', fontSize: '22px', textAlign: 'center', color: '#fff' }}>\n          Scan provided qr to join game\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default ScanQr;\n","import React, { Component } from 'react';\nimport Picker from \"./picker\";\nimport ScanQr from \"./scanqr\";\n\nimport './setup.css';\n\nclass Setup extends Component {\n    state = {\n        joinGame: false\n    }\n\n    toggleJoin = () => {\n        const joinGame = this.state.joinGame;\n        this.setState({joinGame: !joinGame})\n    }\n\n    render() {\n        return (\n            <div id=\"setupScreen\">\n                { !this.state.joinGame && \n                    <button id=\"joinerBtn\" onClick={this.toggleJoin} className=\"round-btn\">\n                        JOIN GAME\n                    </button>\n                }\n\n                { this.state.joinGame &&\n                    <React.Fragment>\n                        <ScanQr onSetUri={ (uri) => this.props.onSetUri(uri) } />\n                \n                        <div className=\"tabs\">\n                            <button className=\"active\" onClick={this.toggleJoin}>\n                                CANCEL\n                            </button>\n                        </div>\n                    </React.Fragment>\n                }\n\n                {/* <div className=\"actions\">\n                    {\n                        this.state.tab === 0 &&\n                        (\n                            <Picker/>\n                        )\n                    }\n                    {\n                        this.state.tab === 1 &&\n                        (\n                            <ScanQr onSetUri={ (uri) => this.props.onSetUri(uri) } />\n                        )\n                    }\n                </div>  */}\n                {/* <div className=\"tabs\">\n                    <button className={this.state.tab === 0 ? 'active' : ''} onClick={ () => this.setState({tab: 0})}>\n                        DURATION\n                    </button>\n                    <span></span>\n                    <button className={this.state.tab === 1 ? 'active' : ''} onClick={ () => this.setState({tab: 1})}>\n                        CONNECT\n                    </button>\n                </div> */}\n            </div>\n        );\n    }\n}\n\nexport default Setup;\n","import React from 'react';\nimport './Slide.css';\n\nconst Slide = ( props ) => {\n  const { slide, current, dx, moved, nextStyle } = props;\n  const slideStyle = {...nextStyle, transform: `translateX(${dx}px)`};\n\n  return (\n    <div id=\"Slide\" className={ current ? 'current' : ' ' + (moved ? 'moved' : ' ')} \n      style={slideStyle}>\n      \n      { \n        slide && (<div id=\"title\">\n          <h2>{ slide.name }</h2>\n        </div>)\n      }\n      \n    </div>\n  );\n}\n \nexport default Slide;","import React from 'react';\nimport './SlideStack.css';\n\nimport Gesture from 'rc-gesture';\n\nimport Slide from '../Slide';\n\nconst max = window.innerWidth / 2;\nlet canDouble = false;\n\nclass SlideStack extends React.Component {\n  state = {\n    moving: false,\n    moved: false,\n    dir: 0, \n    dx: 0,\n    slides: this.props.slides\n  }\n\n  handleSwiped = (dir) => {\n    console.log(\"Swipe event: \");\n\n    if(!canDouble){\n      canDouble = true;\n\n      setTimeout(() => {\n        if(canDouble){\n          canDouble = false;\n          this.props.onSlideAction({ type: 'revealdown' });\n        }\n      }, 200);\n\n      return;\n    }\n\n    canDouble = false;\n    this.props.onSlideAction({ type: 'revealup' });\n  }\n  \n  handlePanning = (status, e) => {\n    this.setState({moving: status});\n\n    if(e){\n      const canNext = e.direction === 2 && this.props.next;\n      const canPrev = e.direction === 4 && this.props.prev;\n      if(status && (canNext || canPrev))\n        this.setState({dx: e.moveStatus.x, dir: e.direction === 2 ? -1: 1});\n    }\n\n    if(!status){\n      if(Math.abs(this.state.dx) < max){\n        this.setState({dx: 0, dir: 0});\n      }else{\n        this.props.onAction({ type: this.state.dir === -1 ? 'next' : 'prev' });\n        this.setState({moved: true, dx: this.state.dir === -1 ? -max * 2: max * 2});\n\n        setTimeout(() => {\n          this.setState({moved: false, dx: 0, dir: 0});\n        }, 5);\n      }\n    }\n  }\n\n  render(){ \n    const { dx, moving, moved, dir } = this.state;\n    const { cur, next, prev } = this.props;\n    const deg = dir * (Math.abs(dx) * 0.2 / (max * 2)) * 45;\n   \n    const prevStyle = {\n      opacity: moved ? 1 : moving && dir === 1 ? Math.abs(dx) / (max * 2)  : '',\n      transform: `scale(${moving && dir === 1 ? (0.8 + (Math.abs(dx) * 0.2 / (max * 2))).toFixed(2) : 'none'})`\n    }\n    \n    const nextStyle = {\n      opacity: moved ? 1 : moving && dir === -1 ? Math.abs(dx) / (max * 2)  : '',\n      transform: `scale(${moving && dir === -1 ? (0.8 + (Math.abs(dx) * 0.2 / (max * 2))).toFixed(2) : 'none'})`\n    }\n\n    return (\n      <React.Fragment>\n      <div id=\"slideStack\">\n        <Slide nextStyle={prevStyle} slide={ prev } />\n\n        <Gesture direction=\"horizontal\"\n            onTap={ this.handleSwiped }\n            onPanStart={() => this.handlePanning(true) }\n            onPanMove={e => this.handlePanning(true, e) }\n            onPanEnd={() => this.handlePanning(false) }\n          >\n          \n          <div id=\"Slide\" className={ 'current ' + (moved ? 'moved' : ' ')} \n            style={{ transform: `translateX(${dx}px) rotate(${deg}deg)` }}>\n              <div id=\"title\">\n                <h2>{cur.name}</h2>\n              </div>\n          </div>\n          \n        </Gesture>\n\n        <Slide nextStyle={nextStyle} slide={ next } />\n      </div>\n\n      {\n        cur.actions && cur.actions.length > 0 && cur.actions.filter(a => a.type === 'video').length > 0\n        && <button className=\"video-player\" onClick={ () => this.props.onSlideAction({ type: 'video' }) }>PLAY VIDEO</button>\n      }\n\n      </React.Fragment>\n\n    );\n  }\n}\n \nexport default SlideStack;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Event } from 'react-socket-io';\n\nimport SlideStack from './SlideStack';\n\n// import slides from './slides'\n\nclass App extends React.Component {\n  static contextTypes = {\n    socket: PropTypes.object.isRequired\n  }\n\n  state = {\n    name: '',\n    points: 120\n  }\n\n  onSetup = (data) => {\n    console.log(\"Game setup set!\", data);\n    // alert(\"Setup data:\", JSON.stringify(data));\n    // this.setState({slides: data.slides_preview});\n    // console.log(\"Setup: \", JSON.stringify(data.slides_preview));\n  }\n\n  onBuzz = () => {\n    this.context.socket.emit('GAME_ACTION', {type: 'buzz'});\n    // console.log(action.type);\n  }\n\n\n  render() {\n    const Buzzer = ( { onBuzz } ) => {\n      return ( \n        <button id=\"buzzer\" className=\"round-btn\" onClick={onBuzz}>\n          BUZZ\n        </button>\n      );\n    }\n    const { points } = this.state;\n    return (\n      <div id=\"mainApp\">\n        {/* <div id=\"slideIndex\">{ points }</div> */}\n\n        <Event event='setup' handler={this.onSetup} />\n\n        <Buzzer onBuzz={this.onBuzz}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { Socket } from 'react-socket-io';\nimport Setup from './Setup';\nimport App from './App';\n\nconst uri = 'http://192.168.8.102:5000';\nconst options = { transports: ['websocket'] };\n\nclass AppContainer extends React.Component {\n  state = {\n    uri: null,\n    started: false\n  };\n\n  getStarted = () => {\n    this.setState({ started: true });\n    this.openFullscreen(document.getElementById(\"root\"))\n    window.screen.orientation.lock(\"portrait-primary\");\n  }\n  \n  setUri = (uri) => {\n    this.setState({ uri: uri});\n  }\n\n  openFullscreen = (elem) => {\n    if (elem.requestFullscreen) {\n      elem.requestFullscreen();\n    } else if (elem.mozRequestFullScreen) { /* Firefox */\n      elem.mozRequestFullScreen();\n    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n      elem.webkitRequestFullscreen();\n    } else if (elem.msRequestFullscreen) { /* IE/Edge */\n      elem.msRequestFullscreen();\n    }\n    else{\n      console.log(\"Not elligible for full screen\");\n    }\n  }\n  \n  render() {\n    return (\n      <React.Fragment>\n        {\n          this.state.uri !== null &&\n            <Socket uri={this.state.uri} options={options}> \n              <App />\n            </Socket>\n        }\n\n        {\n          this.state.uri === null &&\n            <Setup onSetUri={ (uri) => this.setUri(uri) }/>\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AppContainer;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppContainer from './AppContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <AppContainer/>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}